Program-1: Addition using Command line argument
===============================================
1. Add the below code in addition_demo.js file
   let args = process.argv.slice(2);
   const [a, b] = args;
   console.log(`Addtion of ${a} & ${b} is ${+a + +b}`);
2. Run the file 
   node addition_demo.js 10 20


Program-2: collect key=value arg using minimist
===============================================
1. create a project 
   npm init -y
2. install minimist in our project
   npm install minimist
3. Add the below code in minimist_demo_1.js file
    const minimist = require('minimist');
	const argArr = process.argv.slice(2);
	const argObj = minimist(argArr);
	console.log(argObj.name , argObj.add)
4. Run the file 
   node minimist_demo_1.js --name=sanjay --add=bangalore
   

Program-2: Arithmetic Example using Command line argument
=========================================================
const arg = process.argv.slice(2);
if (process.argv.length === 2) {
  console.error("Please provide 1 operator and 2 operand values");
  process.exit(1);
}
const op = arg[0];
const num1 = Number(arg[1]);
const num2 = Number(arg[2]);
switch (op) {
  case "+":
    console.log(`Result of ${num1} + ${num2} = ${num1 + num2}`);
    break;
  case "-":
    console.log(`Result of ${num1} - ${num2} = ${num1 - num2}`);
    break;
  case "*":
    console.log(`Result of ${num1} * ${num2} = ${num1 * num2}`);
    break;
  case "/":
    if (num2 == 0) {
      console.log("cannot be divided by zero!!");
    } else {
      console.log(`Result of ${num1} / ${num2} = ${num1 / num2}`);
    }
    break;
  default:
    console.log(`operation cannot be performed!!`);
}




Program-3: URL Module
=====================
const url = require('url');

const urlStr = 'http://localhost:8080/default.htm?year=2025&month=february';
const urlObj = url.parse(urlStr, true);

console.log(urlObj); 
console.log(urlObj.host);      // localhost:8080
console.log(urlObj.pathname);  // default.htm
console.log(urlObj.search);    // ?year=2025&month=february
const queryParams = urlObj.query;   // { year: 2025, month: 'february' }
console.log(queryParams.year, queryParams.month); // 2025 february




Program-4: File Operations
==========================
let fs = require('fs');
// Over write the exisiting text
fs.writeFile('myText.txt','This is about the Fs',function(){
    console.log('Task Done')
});
// Keep adding text in same file
fs.appendFile('myCode.txt','I m doing nodejs \n',function(){
    console.log('Task Done')
});
// ReadFile
fs.readFile('location.json','utf-8',function(err,data){
    if(err) throw err;
    console.log(data)
});
//Rename File
fs.rename('myText.txt','mydata.txt',function(err){
    if(err) throw err;
    console.log('File Renamed')
});
// Delete File
fs.unlink('mydata.txt',function(err){
    if(err) throw err;
    console.log('File Deleted')
})


Winston
========
const express = require('express');
const winston = require('winston');

const app = express();
const port = 3000;

// Configure Winston logger
const logger = winston.createLogger({
  level: 'info', // Log level: 'error', 'warn', 'info', 'http', 'verbose', 'debug', 'silly'
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.printf(({ timestamp, level, message }) => {
      return `${timestamp} [${level.toUpperCase()}]: ${message}`;
    })
  ),
  transports: [
    new winston.transports.Console(), // Log to the console
    new winston.transports.File({ filename: 'app.log' }) // Log to a file
  ]
});

// Middleware to log each request
app.use((req, res, next) => {
  logger.info(`HTTP ${req.method} ${req.url}`);
  next();
});

// Basic routes
app.get('/', (req, res) => {
  logger.info('Home route accessed.');
  res.send('Hello, World!');
});

app.get('/error', (req, res) => {
  logger.error('Simulated error route accessed.');
  res.status(500).send('This is an error route.');
});

// Error handling middleware
app.use((err, req, res, next) => {
  logger.error(`Error: ${err.message}`);
  res.status(500).send('Something went wrong!');
});

app.listen(port, () => {
  logger.info(`Server is running on http://localhost:${port}`);
});




without CORS
============
1. add the below backend code in a file

const express = require("express");
const app = express();
const port = 5000;
app.get("/cars", (request, response) => {
  return response.json(["Mercedes", "BMW", "Toyota", "Audi"]);
});
app.listen(port, () => {
  console.log("   >  backend started...");
});

2. open https://www.w3schools.com/ and console, execute the below code in console
fetch("http://localhost:5000/cars").then(req => req.text()).then(console.log)


ExecFile
=========
const { execFile } = require('child_process');
const path = require('path');
execFile(path.resolve(__dirname, 'demo_1.bat'), { shell: true },(error, stdout, stderr) => {
    // if command not found
    if (error) {
        console.log(error.message);
        return;
    }
    // if error while executing the command
    if (stderr) {
        console.log(stderr);
        return;
    }
    console.log(stdout);
});



Template Engine - PUG
=====================
1. npm init -y
2. npm install express pug
3. add the below code in app.js
	const express = require('express');
	const app = express();
	
	app.set('views', './views');
	app.set('view engine', 'pug');

	app.get('/', (req, res) => {
		res.render('index');
	});
	app.listen(5000, () => {
		console.log('Server started at port 5000');
	});


Weather Application using EJS
=============================
1. npm init -y
2. npm install express ejs axios




MongoDB + NodeJs
=================
1. npm i express mongodb
2. Add the below code for DB connection
	const express = require("express");
	const app = express();
	const MongoClient = require("mongodb").MongoClient;
	app.get("/users", async function (req, res) {
	  const client = await MongoClient.connect("mongodb://localhost:27017/");
	  const users = client.db("march2023").collection("users").find({});
	  const result = await users.toArray();
	  res.json(result);
	  await client.close();
	});



GraphQL
========
1. npm init -y
2. npm install graphql express express-graphql
3. add server.js


query getSingleCourse($courseID: Int!) {
    course(id: $courseID) {
        title
        author
        description
        topic
        url
    }
}
-----------
{ 
    "courseID":1
}




Apollo Server & GraphQL
========================
1. Create a new project
   mkdir graphql-server-example
   cd graphql-server-example  
2. Install dependencies
   npm init --yes
   npm i express cors @apollo/server graphql mongoose
3. Define GraphQL schema
   const typeDefs = `
        #graphql
        type Product{
            id: ID,
            name: String,
            category: String,
            price: Int,
            quantity: Int,
            rating: [Int],
        }
        type Query {
            getProductList: [Product]
            getProduct(id:ID): Product
        }
        type Mutation {

        }
  `
4. Define resolver
  const resolvers = {
    Query: {
        getProductList: async () => {
            const products = await productModel.find();
            return products;
        },
        getProduct: async (parent, args) => {
            const product = await productModel.findById(args.id);
            return product;
        },
    },
    Mutation: {

    }
 }
5. Create an instance of ApolloServer
	const server = new ApolloServer({
	  typeDefs,
	  resolvers,
	});
	const { url } = await startStandaloneServer(server, {
	  listen: { port: 4000 },
	});
	console.log(`ðŸš€  Server ready at: ${url}`);




NodeMailer
==========
const nodemailer = require("nodemailer");
const express = require('express');
const app = express();

async function sendMyMail() {
    const transporter = nodemailer.createTransport({
        service: 'gmail',
        auth: {
            user: "sanjaysamantra2@gmail.com",
            pass: "oiug hmtp wwiw csbq", // google app password
        }
    });
    await transporter.sendMail({
        from: '"Sanjay Samantra ðŸ‘»" sanjaysamantra2@gmail.com', // sender address
        to: "teja.madu@gmail.com,gveerendray1803@gmail.com", // list of receivers
        subject: "Hello âœ”", // Subject line
        html: `
            <h1>This is a Test Email</h1>
            <h3 style="color:red;text-align:center">Congratulations!!</h3>
            <p>Please follow the instructions to claim your amoubt</p>
            <pre>
                Helloooooooo
                Hiiiiiiiiiiiii
                Good Morning
            </pre>
        `,
        attachments:[
            {
                filename: 'profile.png',
                path: './profile.png'
            }
        ]
    });
    console.log("Message Sent Successfully!!!");
}
app.get('/sendMail', async (req, res) => {
    try {
        await sendMyMail();
        res.send("Message Sent Successfully!!!");
    } catch (err) {
        res.send(err)
    }
});
app.listen(5000, () => {
    console.log(`app Running at 5000 port`)
});




Express File Upload
====================
const express = require('express');
const fileUpload = require('express-fileupload');
const app = express();
app.use(fileUpload()); //fileUpload middleware
app.get('/', (req, res) => {
    res.send(`
        <form id='uploadForm' method='post' action='http://localhost:5000/upload' 
            encType="multipart/form-data">
            <input type='file' name='myFiles' multiple />
            <input type='submit' value='upload' />
        </form>
    `)
})
app.post('/upload', (req, res) => {
    if (!req.files || Object.keys(req.files).length === 0) {
        return res.status(400).send('No Files Uploaded!!');
    }
    // myFiles is the name of inputfield in the form
    let myFiles = req.files.myFiles;
    let uploadPath = `${__dirname}/assets/${myFiles.name}`;
    myFiles.mv(uploadPath, function (err) {
        if (err)
            return res.status(500).send(err);
        res.status(200).send(`${myFiles.name} uploaded successfully!!!`);
    })
});
app.listen(5000, () => {
    console.log(`app Running at 5000 port`)
});

   

Formidable File Upload
======================
const express = require('express');
const fs = require('fs');
const { formidable } = require('formidable');
const app = express();
app.get('/', (req, res) => {
    res.writeHead(200, { 'Content-Type': 'text/html' });
    res.end(`
      <h2>With Node.js <code>"http"</code> module</h2>
      <form action="/api/upload" enctype="multipart/form-data" method="post">

        <div>Name: <input type="text" name="name" /></div>
        <div>Email: <input type="text" name="email" /></div>
        <div>Phone: <input type="text" name="phone" /></div>

        <div>File: <input type="file" name="myFiles" multiple="multiple" /></div>

        <input type="submit" value="Upload" />
      </form>
    `);
})
app.post('/api/upload', async (req, res) => {
    const form = formidable({});
    let fields;
    let files;
    try {
        [fields, files] = await form.parse(req);
    } catch (err) {
        res.end(String(err));
        return;
    }
    for (let file of files.myFiles) {
        let oldPath = file.filepath;
        let newPath = `${__dirname}/assets/${file.originalFilename}`;
        let imageFile = fs.readFileSync(oldPath);
        fs.writeFileSync(newPath, imageFile);
        res.end('Files Uploaded Succesfully!!!')
    }
});
app.listen(5000, () => {
    console.log(`Server Running at 5000 port`)
}); 
   

Socket.io
==========
const path = require('path');
const express = require('express');
const { createServer } = require('http');
const { Server } = require('socket.io');
let app = express();
app.use(express.static(path.join(__dirname, "public")));

const httpServer = createServer(app);
const io = new Server(httpServer, {}); // io - socket.io server

io.on("connection", (socket) => {
    console.log('A new client Joined');
    socket.on('setName', (name) => {
        socket.userName = name;
    })
    socket.on('chat', (data) => {
        let userName = socket.userName;
        let currentTime = new Date().toLocaleTimeString();
        let msgObj = { message: data.message, userName, time: currentTime };
        io.emit('chat', msgObj);
    })
});
httpServer.listen(5000, () => console.log('server running at 5000 port'));

---------------------X-------------------------
<html>
<head>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"
        integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
    <script src="/socket.io/socket.io.js"></script>
</head>
<body>
    <h1>Simple Chat Application</h1>
    <p>
        <input id="userName" placeholder="Enter Your Name..." />
        <button id="setNameBtn">Set Name</button>
        <span id="userNameSpan"></span>
    </p>
    <textarea name="" id="myTextarea" style="width:500px;height:300px;"></textarea>
    <p>
        <input id="chatText" placeholder="Enter Your Message..." />
        <button id="sendMsg">Send</button>
    </p>

    <script>
        const socketClient = io();

        let userNameInputBox = document.getElementById('userName');
        let setNameBtn = document.getElementById('setNameBtn');
        let userNameSpan = document.getElementById('userNameSpan');
        let myTextarea = document.getElementById('myTextarea');
        let chatTextInputBox = document.getElementById('chatText');
        let sendMsg = document.getElementById('sendMsg');

        let oldChats = [
            { message: 'Helloooo', userName: 'Adarsh', time: '07:56:00AM' },
            { message: 'Hiiiii', userName: 'Teju', time: '07:57:00AM' }
        ]
        for (chat of oldChats) {
            let { userName, message, time } = chat;
            let msg = `${userName} : ${message} (${time})`;
            myTextarea.value = myTextarea.value + msg + '\n'
        }
        setNameBtn.addEventListener('click', () => {
            const userName = userNameInputBox.value;
            socketClient.emit('setName', userName);
            userNameInputBox.value = '';
            userNameSpan.innerHTML = `Hello <b>${userName}</b>`;
        });
        sendMsg.addEventListener('click', () => {
            socketClient.emit('chat', { message: chatTextInputBox.value });
            chatTextInputBox.value = '';
        });

        socketClient.on('chat', (msgData) => {
            let { userName, message, time } = msgData;
            let msg = `${userName} : ${message} (${time})`;
            myTextarea.value = myTextarea.value + msg + '\n'
        })
    </script>
</body>
</html>





Swagger
=======
1. npm init -y
2. npm install swagger-jsdoc swagger-ui-express 
3. add server.js
4. add the file swagger.json to define the operations.
5. add the file swagger.css to define custom css
6. Node server.js and try 'http://localhost:5000/api-docs/'


Phonepe Payment Gateway
=======================
1. npm init -y
2. npm i express cors axios crypto